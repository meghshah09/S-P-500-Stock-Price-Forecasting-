# -*- coding: utf-8 -*-
"""prophetDemo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KzInwyC7ykvWZkcP6QktPYOEKUPXxQXE
"""

!pip install plotly==4.8.1
!pip install chart_studio

!pip uninstall statsmodels
!pip install numpy scipy patsy pandas 
!pip install statsmodels

# Import Libraries
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
from fbprophet import Prophet

import statsmodels.api as sm
from scipy import stats
from plotly import tools
import chart_studio.plotly as py
import plotly.figure_factory as ff
import plotly.tools as tls
import plotly.graph_objs as go
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import warnings
warnings.filterwarnings("ignore")
plt.style.use("seaborn-whitegrid")

#load the dataset using pandas
data = pd.read_csv("sp_500_historical.csv");

print(data.tail(5));

data.describe()

"""We need to make sure if the date column is either a categorical type or a datetype. In our case date is a categorical datatype so we need to change it to datetime."""

# Create a copy to avoid the SettingWarning .loc issue 
data_df = data.copy()
# Change to datetime datatype.
data_df.loc[:, 'Date'] = pd.to_datetime(data.loc[:,'Date'], format="%Y/%m/%d")

data_df.describe()

data_df.info()

# First Subplot
f, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,10))
ax1.plot(data_df["Date"], data_df["Close"], color="black")
ax1.set_xlabel("Date", fontsize=12)
ax1.set_ylabel("Stock Price")
ax1.set_title("S&P 500 Close Price History")

# Second Subplot
ax1.plot(data_df["Date"], data_df["High"], color="green")
ax1.set_xlabel("Date", fontsize=12)
ax1.set_ylabel("Stock Price")
ax1.set_title("S&P High Price History")

# Third Subplot
ax1.plot(data_df["Date"], data_df["Low"], color="red")
ax1.set_xlabel("Date", fontsize=12)
ax1.set_ylabel("Stock Price")
ax1.set_title("S&P 500 Price (High, Low, Close) History")

# Fourth Subplot
ax2.plot(data_df["Date"], data_df["Volume"], color="orange")
ax2.set_xlabel("Date", fontsize=12)
ax2.set_ylabel("Volume")
ax2.set_title("S&P 500 Volume History")
plt.show()

"""**Prophet introduction**

> Prophet is a library developed by facebook research team fro time series forecasting.Prophet works well with data set that is highly influenced by seasonality like ( Online Sales Data, Enterprise Sales Data, Travel, Electricity Bills, etc.)

**Steps for using Prophet:**
1.   Make sure you replace closing price for y and date for ds.
2.   Fit that dataframe to Prophet in order to detect future patterns.
3. Predict the upper and lower prices of the closing price.
"""

prophet = Prophet()

# Drop the columns
prophet_df = data_df.drop(['Open', 'High', 'Low','Volume','Adj Close'], axis=1)
prophet_df.rename(columns={'Close': 'y', 'Date': 'ds'}, inplace=True)

prophet_df.head()

prophet.fit(prophet_df)

future_prices = prophet.make_future_dataframe(periods=365)

future_prediction = prophet.predict(future_prices)
future_prediction[['ds','yhat','yhat_lower','yhat_upper']].tail()

import matplotlib.dates as mdates

# Dates
starting_date = dt.datetime(2020, 10, 12)
starting_date1 = mdates.date2num(starting_date)
trend_date = dt.datetime(2020, 3, 22)
trend_date1 = mdates.date2num(trend_date)

pointing_arrow = dt.datetime(2020, 6, 12)
pointing_arrow1 = mdates.date2num(pointing_arrow)

# Learn more Prophet tomorrow and plot the forecast for S&P 500.
fig = prophet.plot(future_prediction)
ax1 = fig.add_subplot(111)
ax1.set_title("S&P 500 Stock Price Forecast", fontsize=16)
ax1.set_xlabel("Date", fontsize=12)
ax1.set_ylabel("Close Price", fontsize=12)

# Forecast initialization arrow
ax1.annotate('Forecast \n Initialization', xy=(pointing_arrow1, 3050), xytext=(starting_date1,3300),
            arrowprops=dict(facecolor='#ff7f50', shrink=0.1),
            )

# Trend emphasis arrow
ax1.annotate('Covid-19 Crisis', xy=(trend_date1, 2300), xytext=(trend_date1,2090),
            arrowprops=dict(facecolor='#6cff6c', shrink=0.1),
            )

ax1.axhline(y=3000, color='b', linestyle='-')

plt.show()

fig2 = prophet.plot_components(future_prediction)
plt.show()

trace = go.Ohlc(x=data_df['Date'],
                open=data_df['Open'],
                high=data_df['High'],
                low=data_df['Low'],
                close=data_df['Close'],
               increasing=dict(line=dict(color= '#58FA58')),
                decreasing=dict(line=dict(color= '#FA5858')))

layout = {
    'title': 'S&P 500 Historical Price',
    'xaxis': {'title': 'Date',
             'rangeslider': {'visible': False}},
    'yaxis': {'title': 'Stock Price (USD$)'},
    'shapes': [{
        'x0': '2016-12-09', 'x1': '2016-12-09',
        'y0': 0, 'y1': 1, 'xref': 'x', 'yref': 'paper',
        'line': {'color': 'rgb(30,30,30)', 'width': 1}
    }],
    'annotations': [{
        'x': '2017-01-20', 'y': 0.05, 'xref': 'x', 'yref': 'paper',
        'showarrow': False, 'xanchor': 'left',
        'text': 'President Donald Trump <br> takes Office'
    }]
}

data = [trace]

fig = go.Figure(data=data, layout=layout)
iplot(fig, filename='simple_ohlc')

data_df['month_year'] = pd.to_datetime(data_df['Date']).dt.to_period('M')

# 2020 onwards
last_year = data_df.loc[data_df['Date'].dt.year > 2019]
g = last_year.groupby(["Date"])
monthly_averages = g.aggregate({"Open": np.mean, "High": np.mean, "Low": np.mean, "Close":np.mean})
monthly_averages.reset_index(level=0, inplace=True)

monthly_averages.dtypes


trace = go.Candlestick(x=monthly_averages['Date'],
                       open=monthly_averages['Open'].values.tolist(),
                       high=monthly_averages['High'].values.tolist(),
                       low=monthly_averages['Low'].values.tolist(),
                       close=monthly_averages['Close'].values.tolist(),
                      increasing=dict(line=dict(color= '#58FA58')),
                decreasing=dict(line=dict(color= '#FA5858')))


layout = {
    'title': 'S&P 500 Historical Price <br> <i>A closer look to the Downward trend </i>',
    'xaxis': {'title': 'Date',
             'rangeslider': {'visible': False}},
    'yaxis': {'title': 'Stock Price (USD$)'}
}


data = [trace]

fig = go.Figure(data=data, layout=layout)
iplot(fig, filename='simple_ohlc')

data_df.head()

# Moving Averages (10, 50 and 200)
data_df['10_d_avg'] = data_df.Close.rolling(window=10).mean()
data_df['50_d_avg'] = data_df.Close.rolling(window=50).mean()
data_df['200_d_avg'] = data_df.Close.rolling(window=200).mean()
close_p = data_df['Close'].values.tolist()


# Variables to insert into plotly
ten_d = data_df['10_d_avg'].values.tolist()
fifty_d = data_df['50_d_avg'].values.tolist()
twoh_d = data_df['200_d_avg'].values.tolist()
date = data_df['Date'].values.tolist()

# Set date as index
data_df = data_df.set_index('Date')

fig = tls.make_subplots(rows=2, cols=1, shared_xaxes=True)

colors = ['#ff4500', '#92a1cf', '#6E6E6E']
avgs = ['10_d_avg', '50_d_avg', '200_d_avg']
# for i,c in zip(range(n),color):
#    ax1.plot(x, y,c=c)

for col, c in zip(avgs, colors):
    fig.append_trace({'x': data_df.index, 'y': data_df[col], 'type': 'scatter', 'name': col, 'line': {'color': c}}, 1, 1)
for col in ['Close']:
    fig.append_trace({'x': data_df.index, 'y': data_df[col], 'type': 'scatter', 'name': 'Closing Price', 'line':{'color': '#01DF3A'}}, 1, 1)
    
fig['layout'].update(height=800,title='Relationship between Moving Average\'s and Closing Price',
                    paper_bgcolor='#F2DFCE', plot_bgcolor='#F2DFCE')
    
iplot(fig, filename='pandas/mixed-type subplots')

# Take off the date index
data_df = data_df.reset_index()

# Plotly
trace0 = go.Scatter(
    x = data_df['Date'],
    y = ten_d,
    name = '10-day MA',
    line = dict(
        color = ('#ff6347'),
        width = 4)
)
trace1 = go.Scatter(
    x = data_df['Date'],
    y = fifty_d,
    name = '50-day MA',
    line = dict(
        color = ('#92a1cf'),
        width = 4,
    dash="dot")
)
trace2 = go.Scatter(
    x = data_df['Date'],
    y = twoh_d,
    name = '200-day MA',
    line = dict(
        color = ('#2EF688'),
        width = 4,
        dash = 'dash') # dash options include 'dash', 'dot', and 'dashdot'
)

data = [trace0, trace1, trace2]


# Edit the layout
layout = dict(title = 'Moving Averages for S&P 500',
              xaxis = dict(title = 'Date'),
              yaxis = dict(title = 'Price'),
              annotations=[
        dict(
            x='2020-03-03',
            y=3264,
            xref='x',
            yref='y',
            text='<i> First major decline <br> after 10-d crosses <br> 50-d moving average </i>',
            showarrow=True,
            arrowhead=5,
            ax=5,
            ay=-50
        ), dict(
        x = "2020-06-03",
        y = 3007,
        text = "<i>Upward trend after <br> 10-day crosses <br>200-day moving average </i>",
        textangle = 0,
        ax = 50,
        ay = 50,
        font = dict(
          color = "black",
          size = 12
        )
        )],
              paper_bgcolor='#FFF9F5',
              plot_bgcolor='#FFF9F5'
              )

fig = dict(data=data, layout=layout)
iplot(fig, filename='styled-line')